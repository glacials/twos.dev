/* Start root elements */

/* Each set of variables that shares the same
first word looks good with or on each other. */
:root {
  --traditional-bg: rgba(48, 48, 78, 1);
  --traditional-fg-a: rgba(235, 255, 240, 1);
  --traditional-fg-b: rgb(245, 222, 153);

  --inverse-bg: rgba(255, 255, 240, 0.19);
  --inverse-fg: rgba(245, 222, 153, 1);

  --darker-bg: rgb(39, 39, 59);
  --darker-bg-shadow: rgba(56, 56, 56, 1);
  --darker-fg: rgba(248, 248, 242, 1);

  --lighter-bg: rgba(48, 48, 78, 1);
  --lighter-fg: rgb(255, 227, 86);
}

@keyframes appear {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

html {
  line-height: 1.5em;
  text-align: justify;

  font-smoothing: antialiased;
  -webkit-font-smoothing: antialiased;

  hyphens: auto;
  -webkit-hyphens: auto;
}

body {
  background: var(--traditional-bg);
  color: var(--traditional-fg-a);
  margin: 0;
}

.container {
  margin: auto;
  max-width: 50em;
}

/* End root elements */
/* Start naked elements */

/* When linked to an anchor, leave some space between top-of-window and the element. */
a[name] {
  scroll-margin-top: 1em;
}

/* Only lowercase links, not anchor targets */
a[href],
a:visited {
  background-color: var(--traditional-bg);
  color: var(--traditional-fg);
}

a:hover {
  background-color: var(--darker-bg);
  color: var(--darker-fg-b);
}

a:hover:has(img) {
  background: inherit;
}

blockquote {
  border-left: 1px solid var(--traditional-fg-a);
  padding-left: 1em;
}

button,
input[type="submit"] {
  background: none;
  border: 1px solid var(--traditional-fg-a);
  color: inherit;
}

/* Nesting em/i should drop styling. Extend nesting levels as needed. */
em em,
em i,
i em,
i i {
  font-style: normal;
}

input {
  font-family: inherit;
}

figcaption {
  font-style: italic;
}

footer {
  margin-top: 4em;
}

h1 {
  color: var(--traditional-fg);
  display: block;
  font-size: 3em;
  line-height: 0.85em;
  /* Undoes weird inheritance of html line-height w/ display:block */
  text-align: center;
  text-transform: uppercase;
}

/* Hero image */
h1 + figure,
h1 + p + figure {
  margin: auto;
  max-width: 40em;
}

h2,
h3 {
  background-color: var(--inverse-bg);
  color: var(--inverse-fg);
  padding-left: 1rem;
}

/* Links would have the same color as the background, so invert them */
h3 a,
h3 a:visited {
  color: var(--inverse-fg);
}

h3 a:hover {
  background-color: var(--traditional-bg);
  color: var(--traditional-fg-a);
}

h2,
h3,
h4,
h5,
h6 {
  display: inline-block;
  margin-top: 2em;
  padding-top: 0.1em;
  padding-right: 1rem;
  padding-bottom: 0;
}

h4,
h5,
h6 {
  color: var(--traditional-fg-b);
  display: block;
  padding-left: 0;
}

hr {
  border: none;
}

hr::before {
  content: "* * *";
  display: block;
  text-align: center;
}

li {
  margin: 0.5em 0;
}

/* Anything that could possibly be an immediate child of .container. Don't want
 * a margin on .container because I want the headings' backgrounds to extend to
 * the left page edge. */
ol,
p,
ul {
  margin-left: 1rem;
  margin-right: 1rem;
}

ul {
  list-style-type: "- ";
}

video + video {
  margin-left: 1em;
}

/* End naked elements */
/* Start nav */

nav {
  font-size: 1.3em;
}

.selected,
a.selected {
  background: var(--inverse-bg);
  color: var(--inverse-fg);
}

nav a {
  margin: 0 0.2em;
}

/* In case none of the below rules trigger, display a backup.
   This can happen if we're not on any of these pages.
*/
nav .arrow::before {
  content: "↔";
}

/* Hovered/selected nav links should make arrows on their right point left */
nav a:hover ~ .arrow::before {
  content: "←" !important;
}

nav a.selected ~ .arrow::before {
  content: "←" !important;
}

/* Hovered/selected  nav links should make arrows on their left point right */
nav .arrow:has(~ a:hover)::before {
  content: "→" !important;
}

nav .arrow:has(~ a.selected)::before {
  content: "→";
}

/* End nav */
/* Start classes */

.dark-only {
  display: block;
}

.light-only {
  display: none;
}

a img.silly {
  filter: grayscale(100%);
  -webkit-filter: grayscale(100%);

  opacity: 0.8;
}

a:hover img.silly {
  filter: contrast(100%) grayscale(0%) !important;
  -webkit-filter: contrast(100%) grayscale(0%) !important;

  transform: rotate(360deg);
  transition: 900s;
}

.footnotes {
  font-size: 0.8em;
}

.photo-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(10em, 1fr));
}

.photo-grid img {
  float: left;
  width: 100%;
}

/* End classes */

/* Start syntax highlighting (see https://github.com/alecthomas/chroma) */

code {
  background-color: var(--darker-bg);
  color: var(--darker-fg);
  padding: 0.25em 0.5em;
}

pre code {
  display: block;
  padding: 1rem 0;

  background-color: var(--darker-bg);
  color: var(--darker-fg);
}

@media (max-width: 800px) {
  pre {
    min-width: 100%;
  }
}

pre .ln {
  margin-left: 1rem;
  user-select: none;
  -webkit-user-select: none;
}

pre .cl {
  margin-left: 1rem;
}

pre .line {
  margin-right: 2rem;
}

pre {
  background-color: var(--darker-bg);
  color: var(--darker-fg);
  font-family: "PT Mono", monospace;
  letter-spacing: 0;
  margin-bottom: 2em;
  padding: 1rem;
}

/* CV-specific */
h3.company {
  margin-bottom: 0;
  margin-top: 0;
}

.role {
  padding-left: 1rem;
}

@media (min-width: 34em) {
  .left {
    float: left;
    margin-top: 1em;
  }

  .right {
    float: right;
    text-align: right;
    margin-top: 1em;
    margin-right: 10px;
  }
}

/* Background */
.bg {
  color: var(--darker-fg);
  background-color: var(--darker-bg);
}

/* PreWrapper */
.chroma {
  color: var(--darker-fg);
  background-color: var(--darker-bg);
}

/* LineNumbers targeted by URL anchor */
.chroma .ln:target {
  color: var(--darker-fg);
  background-color: var(--darker-bg);
}

/* LineNumbersTable targeted by URL anchor */
.chroma .lnt:target {
  color: #f8f8f2;
  background-color: #3d3f4a;
}

/* LineTableTD */
.chroma .lntd {
  vertical-align: top;
  padding: 0;
  margin: 0;
  border: 0;
}

/* LineTable */
.chroma .lntable {
  border-spacing: 0;
  padding: 0;
  margin: 0;
  border: 0;
}

/* LineHighlight */
.chroma .hl {
  background-color: #3d3f4a;
}

/* LineNumbersTable */
.chroma .lnt {
  white-space: pre;
  user-select: none;
  margin-right: 0.4em;
  padding: 0 0.4em 0 0.4em;
  color: #7f7f7f;
}

/* LineNumbers */
.chroma .ln {
  white-space: pre;
  user-select: none;
  margin-right: 0.4em;
  padding: 0 0.4em 0 0.4em;
  color: #7f7f7f;
}

/* Line */
.chroma .line {
  display: flex;
}

/* Keyword */
.chroma .k {
  color: #ff79c6;
}

/* KeywordConstant */
.chroma .kc {
  color: #ff79c6;
}

/* KeywordDeclaration */
.chroma .kd {
  color: #8be9fd;
  font-style: italic;
}

/* KeywordNamespace */
.chroma .kn {
  color: #ff79c6;
}

/* KeywordPseudo */
.chroma .kp {
  color: #ff79c6;
}

/* KeywordReserved */
.chroma .kr {
  color: #ff79c6;
}

/* KeywordType */
.chroma .kt {
  color: #8be9fd;
}

/* NameAttribute */
.chroma .na {
  color: #50fa7b;
}

/* NameBuiltin */
.chroma .nb {
  color: #8be9fd;
  font-style: italic;
}

/* NameClass */
.chroma .nc {
  color: #50fa7b;
}

/* NameFunction */
.chroma .nf {
  color: #50fa7b;
}

/* NameLabel */
.chroma .nl {
  color: #8be9fd;
  font-style: italic;
}

/* NameTag */
.chroma .nt {
  color: #ff79c6;
}

/* NameVariable */
.chroma .nv {
  color: #8be9fd;
  font-style: italic;
}

/* NameVariableClass */
.chroma .vc {
  color: #8be9fd;
  font-style: italic;
}

/* NameVariableGlobal */
.chroma .vg {
  color: #8be9fd;
  font-style: italic;
}

/* NameVariableInstance */
.chroma .vi {
  color: #8be9fd;
  font-style: italic;
}

/* LiteralString */
.chroma .s {
  color: #f1fa8c;
}

/* LiteralStringAffix */
.chroma .sa {
  color: #f1fa8c;
}

/* LiteralStringBacktick */
.chroma .sb {
  color: #f1fa8c;
}

/* LiteralStringChar */
.chroma .sc {
  color: #f1fa8c;
}

/* LiteralStringDelimiter */
.chroma .dl {
  color: #f1fa8c;
}

/* LiteralStringDoc */
.chroma .sd {
  color: #f1fa8c;
}

/* LiteralStringDouble */
.chroma .s2 {
  color: #f1fa8c;
}

/* LiteralStringEscape */
.chroma .se {
  color: #f1fa8c;
}

/* LiteralStringHeredoc */
.chroma .sh {
  color: #f1fa8c;
}

/* LiteralStringInterpol */
.chroma .si {
  color: #f1fa8c;
}

/* LiteralStringOther */
.chroma .sx {
  color: #f1fa8c;
}

/* LiteralStringRegex */
.chroma .sr {
  color: #f1fa8c;
}

/* LiteralStringSingle */
.chroma .s1 {
  color: #f1fa8c;
}

/* LiteralStringSymbol */
.chroma .ss {
  color: #f1fa8c;
}

/* LiteralNumber */
.chroma .m {
  color: #bd93f9;
}

/* LiteralNumberBin */
.chroma .mb {
  color: #bd93f9;
}

/* LiteralNumberFloat */
.chroma .mf {
  color: #bd93f9;
}

/* LiteralNumberHex */
.chroma .mh {
  color: #bd93f9;
}

/* LiteralNumberInteger */
.chroma .mi {
  color: #bd93f9;
}

/* LiteralNumberIntegerLong */
.chroma .il {
  color: #bd93f9;
}

/* LiteralNumberOct */
.chroma .mo {
  color: #bd93f9;
}

/* Operator */
.chroma .o {
  color: #ff79c6;
}

/* OperatorWord */
.chroma .ow {
  color: #ff79c6;
}

/* Comment */
.chroma .c {
  color: #6272a4;
}

/* CommentHashbang */
.chroma .ch {
  color: #6272a4;
}

/* CommentMultiline */
.chroma .cm {
  color: #6272a4;
}

/* CommentSingle */
.chroma .c1 {
  color: #6272a4;
}

/* CommentSpecial */
.chroma .cs {
  color: #6272a4;
}

/* CommentPreproc */
.chroma .cp {
  color: #ff79c6;
}

/* CommentPreprocFile */
.chroma .cpf {
  color: #ff79c6;
}

/* GenericDeleted */
.chroma .gd {
  color: #ff5555;
}

/* GenericEmph */
.chroma .ge {
  text-decoration: underline;
}

/* GenericHeading */
.chroma .gh {
  font-weight: bold;
}

/* GenericInserted */
.chroma .gi {
  color: #50fa7b;
  font-weight: bold;
}

/* GenericOutput */
.chroma .go {
  color: #44475a;
}

/* GenericSubheading */
.chroma .gu {
  font-weight: bold;
}

/* GenericUnderline */
.chroma .gl {
  text-decoration: underline;
}

/* End syntax highlighting (see https://github.com/alecthomas/chroma) */
