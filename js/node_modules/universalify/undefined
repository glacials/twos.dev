<!doctype html>
<html lang="en">

<head>
  <script async src="https://www.googletagmanager.com/gtag/js?id=UA-2876079-11"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());

    gtag('config', 'UA-2876079-11');
  </script>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <meta name="description" content='README'>
  <link rel="icon" href="favicon.ico">
  <link rel="alternate" type="application/rss+xml" title="twos.dev" href="/feed.rss" />
  <title>README</title>
  <link rel="stylesheet" href="style.css" />
  <style>
    .spectrum {
      height: 10em;
      width: 10em;
      background: conic-gradient(
        hsl(0, 90%, 65%),
        hsl(36, 90%, 65%),
        hsl(72, 90%, 65%),
        hsl(108, 90%, 65%),
        hsl(144, 90%, 65%),
        hsl(180, 90%, 65%),
        hsl(216, 90%, 65%),
        hsl(252, 90%, 65%),
        hsl(288, 90%, 65%),
        hsl(324, 90%, 65%),
        hsl(360, 90%, 65%)
      );
      border: 1px solid;
      border-radius: 90%;
    }
    @media (prefers-color-scheme:light) {
      .spectrum {
        border-color: black;
      }
    @media (prefers-color-scheme:dark) {
      .spectrum {
        border-color: white;
      }
    }

    summary {
      cursor: pointer;
    }
  </style>
</head>

<body>
  <div class="container">
    <header>
      &larr; <a href="index.html">twos.dev</a>
      
    </header>
    <article><h1>universalify</h1><p><a href="https://travis-ci.org/RyanZim/universalify"><img src="https://img.shields.io/travis/RyanZim/universalify/master.svg" alt="Travis branch"></a> <img src="https://img.shields.io/coveralls/github/RyanZim/universalify/master.svg" alt="Coveralls github branch"> <img src="https://img.shields.io/npm/dm/universalify.svg" alt="npm"> <img src="https://img.shields.io/npm/l/universalify.svg" alt="npm"></p><p>Make a callback- or promise-based function support both promises and callbacks.</p><p>Uses the native promise implementation.</p><h2>Installation</h2><pre data-language="bash">npm install universalify
</pre><h2>API</h2><h3><code>universalify.fromCallback(fn)</code></h3><p>Takes a callback-based function to universalify, and returns the universalified  function.</p><p>Function must take a callback as the last parameter that will be called with the signature <code>(error, result)</code>. <code>universalify</code> does not support calling the callback with three or more arguments, and does not ensure that the callback is only called once.</p><pre data-language="js">function callbackFn (n, cb) {
  setTimeout(() =&gt; cb(null, n), 15)
}

const fn = universalify.fromCallback(callbackFn)

// Works with Promises:
fn('Hello World!')
.then(result =&gt; console.log(result)) // -&gt; Hello World!
.catch(error =&gt; console.error(error))

// Works with Callbacks:
fn('Hi!', (error, result) =&gt; {
  if (error) return console.error(error)
  console.log(result)
  // -&gt; Hi!
})
</pre><h3><code>universalify.fromPromise(fn)</code></h3><p>Takes a promise-based function to universalify, and returns the universalified  function.</p><p>Function must return a valid JS promise. <code>universalify</code> does not ensure that a valid promise is returned.</p><pre data-language="js">function promiseFn (n) {
  return new Promise(resolve =&gt; {
    setTimeout(() =&gt; resolve(n), 15)
  })
}

const fn = universalify.fromPromise(promiseFn)

// Works with Promises:
fn('Hello World!')
.then(result =&gt; console.log(result)) // -&gt; Hello World!
.catch(error =&gt; console.error(error))

// Works with Callbacks:
fn('Hi!', (error, result) =&gt; {
  if (error) return console.error(error)
  console.log(result)
  // -&gt; Hi!
})
</pre><h2>License</h2><p>MIT</p></article>

    <footer>
      &larr; <a href="index.html">twos.dev</a> /
      
        <a href="https://github.com/glacials/twos.dev/blob/main/src/js/node_modules/universalify/undefined">Source</a>
      
    </footer>
  </div></body>
</html>
