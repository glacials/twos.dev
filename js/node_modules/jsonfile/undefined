<!doctype html>
<html lang="en">

<head>
  <script async src="https://www.googletagmanager.com/gtag/js?id=UA-2876079-11"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());

    gtag('config', 'UA-2876079-11');
  </script>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <meta name="description" content='README'>
  <link rel="icon" href="favicon.ico">
  <link rel="alternate" type="application/rss+xml" title="twos.dev" href="/feed.rss" />
  <title>README</title>
  <link rel="stylesheet" href="style.css" />
  <style>
    .spectrum {
      height: 10em;
      width: 10em;
      background: conic-gradient(
        hsl(0, 90%, 65%),
        hsl(36, 90%, 65%),
        hsl(72, 90%, 65%),
        hsl(108, 90%, 65%),
        hsl(144, 90%, 65%),
        hsl(180, 90%, 65%),
        hsl(216, 90%, 65%),
        hsl(252, 90%, 65%),
        hsl(288, 90%, 65%),
        hsl(324, 90%, 65%),
        hsl(360, 90%, 65%)
      );
      border: 1px solid;
      border-radius: 90%;
    }
    @media (prefers-color-scheme:light) {
      .spectrum {
        border-color: black;
      }
    @media (prefers-color-scheme:dark) {
      .spectrum {
        border-color: white;
      }
    }

    summary {
      cursor: pointer;
    }
  </style>
</head>

<body>
  <div class="container">
    <header>
      &larr; <a href="index.html">twos.dev</a>
      
    </header>
    <article><p>Node.js - jsonfile ================</p><p>Easily read/write JSON files in Node.js. <em>Note: this module cannot be used in the browser.</em></p><p><a href="https://www.npmjs.org/package/jsonfile"><img src="https://img.shields.io/npm/v/jsonfile.svg?style=flat-square" alt="npm Package"></a> <a href="http://travis-ci.org/jprichardson/node-jsonfile"><img src="https://secure.travis-ci.org/jprichardson/node-jsonfile.svg" alt="build status"></a> <a href="https://ci.appveyor.com/project/jprichardson/node-jsonfile/branch/master"><img src="https://img.shields.io/appveyor/ci/jprichardson/node-jsonfile/master.svg?label=windows%20build" alt="windows Build status"></a></p><p>&lt;a href=&quot;https://github.com/feross/standard&quot;&gt;&lt;img src=&quot;https://cdn.rawgit.com/feross/standard/master/sticker.svg&quot; alt=&quot;Standard JavaScript&quot; width=&quot;100&quot;&gt;&lt;/a&gt;</p><p>Why?</p><hr><p>Writing <code>JSON.stringify()</code> and then <code>fs.writeFile()</code> and <code>JSON.parse()</code> with <code>fs.readFile()</code> enclosed in <code>try/catch</code> blocks became annoying.</p><p>Installation</p><hr><p>API</p><hr><ul><li><a href="#readfilefilename-options-callback"><code>readFile(filename, [options], callback)</code></a></li><li><a href="#readfilesyncfilename-options"><code>readFileSync(filename, [options])</code></a></li><li><a href="#writefilefilename-obj-options-callback"><code>writeFile(filename, obj, [options], callback)</code></a></li><li><a href="#writefilesyncfilename-obj-options"><code>writeFileSync(filename, obj, [options])</code></a></li></ul><hr><h3>readFile(filename, [options], callback)</h3><p><code>options</code> (<code>object</code>, default <code>undefined</code>): Pass in any <a href="https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback"><code>fs.readFile</code></a> options or set <code>reviver</code> for a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse">JSON reviver</a>.</p><ul><li><code>throws</code> (<code>boolean</code>, default: <code>true</code>). If <code>JSON.parse</code> throws an error, pass this error to the callback. If <code>false</code>, returns <code>null</code> for the object.</li></ul><pre data-language="js">const jsonfile = require('jsonfile')
const file = '/tmp/data.json'
jsonfile.readFile(file, function (err, obj) {
  if (err) console.error(err)
  console.dir(obj)
})
</pre><p>You can also use this method with promises. The <code>readFile</code> method will return a promise if you do not pass a callback function.</p><pre data-language="js">const jsonfile = require('jsonfile')
const file = '/tmp/data.json'
jsonfile.readFile(file)
  .then(obj =&gt; console.dir(obj))
  .catch(error =&gt; console.error(error))
</pre><hr><h3>readFileSync(filename, [options])</h3><p><code>options</code> (<code>object</code>, default <code>undefined</code>): Pass in any <a href="https://nodejs.org/api/fs.html#fs_fs_readfilesync_path_options"><code>fs.readFileSync</code></a> options or set <code>reviver</code> for a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse">JSON reviver</a>.</p><ul><li><code>throws</code> (<code>boolean</code>, default: <code>true</code>). If an error is encountered reading or parsing the file, throw the error. If <code>false</code>, returns <code>null</code> for the object.</li></ul><pre data-language="js">const jsonfile = require('jsonfile')
const file = '/tmp/data.json'

console.dir(jsonfile.readFileSync(file))
</pre><hr><h3>writeFile(filename, obj, [options], callback)</h3><p><code>options</code>: Pass in any <a href="https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback"><code>fs.writeFile</code></a> options or set <code>replacer</code> for a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON replacer</a>. Can also pass in <code>spaces</code>, or override <code>EOL</code> string or set <code>finalEOL</code> flag as <code>false</code> to not save the file with <code>EOL</code> at the end.</p><pre data-language="js">const jsonfile = require('jsonfile')

const file = '/tmp/data.json'
const obj = { name: 'JP' }

jsonfile.writeFile(file, obj, function (err) {
  if (err) console.error(err)
})
</pre><p>Or use with promises as follows:</p><pre data-language="js">const jsonfile = require('jsonfile')

const file = '/tmp/data.json'
const obj = { name: 'JP' }

jsonfile.writeFile(file, obj)
  .then(res =&gt; {
    console.log('Write complete')
  })
  .catch(error =&gt; console.error(error))
</pre><p><strong>formatting with spaces:</strong></p><pre data-language="js">const jsonfile = require('jsonfile')

const file = '/tmp/data.json'
const obj = { name: 'JP' }

jsonfile.writeFile(file, obj, { spaces: 2 }, function (err) {
  if (err) console.error(err)
})
</pre><p><strong>overriding EOL:</strong></p><pre data-language="js">const jsonfile = require('jsonfile')

const file = '/tmp/data.json'
const obj = { name: 'JP' }

jsonfile.writeFile(file, obj, { spaces: 2, EOL: '\r\n' }, function (err) {
  if (err) console.error(err)
})
</pre><p><strong>disabling the EOL at the end of file:</strong></p><pre data-language="js">const jsonfile = require('jsonfile')

const file = '/tmp/data.json'
const obj = { name: 'JP' }

jsonfile.writeFile(file, obj, { spaces: 2, finalEOL: false }, function (err) {
  if (err) console.log(err)
})
</pre><p><strong>appending to an existing JSON file:</strong></p><p>You can use <code>fs.writeFile</code> option <code>{ flag: 'a' }</code> to achieve this.</p><pre data-language="js">const jsonfile = require('jsonfile')

const file = '/tmp/mayAlreadyExistedData.json'
const obj = { name: 'JP' }

jsonfile.writeFile(file, obj, { flag: 'a' }, function (err) {
  if (err) console.error(err)
})
</pre><hr><h3>writeFileSync(filename, obj, [options])</h3><p><code>options</code>: Pass in any <a href="https://nodejs.org/api/fs.html#fs_fs_writefilesync_file_data_options"><code>fs.writeFileSync</code></a> options or set <code>replacer</code> for a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON replacer</a>. Can also pass in <code>spaces</code>, or override <code>EOL</code> string or set <code>finalEOL</code> flag as <code>false</code> to not save the file with <code>EOL</code> at the end.</p><pre data-language="js">const jsonfile = require('jsonfile')

const file = '/tmp/data.json'
const obj = { name: 'JP' }

jsonfile.writeFileSync(file, obj)
</pre><p><strong>formatting with spaces:</strong></p><pre data-language="js">const jsonfile = require('jsonfile')

const file = '/tmp/data.json'
const obj = { name: 'JP' }

jsonfile.writeFileSync(file, obj, { spaces: 2 })
</pre><p><strong>overriding EOL:</strong></p><pre data-language="js">const jsonfile = require('jsonfile')

const file = '/tmp/data.json'
const obj = { name: 'JP' }

jsonfile.writeFileSync(file, obj, { spaces: 2, EOL: '\r\n' })
</pre><p><strong>disabling the EOL at the end of file:</strong></p><pre data-language="js">const jsonfile = require('jsonfile')

const file = '/tmp/data.json'
const obj = { name: 'JP' }

jsonfile.writeFileSync(file, obj, { spaces: 2, finalEOL: false })
</pre><p><strong>appending to an existing JSON file:</strong></p><p>You can use <code>fs.writeFileSync</code> option <code>{ flag: 'a' }</code> to achieve this.</p><pre data-language="js">const jsonfile = require('jsonfile')

const file = '/tmp/mayAlreadyExistedData.json'
const obj = { name: 'JP' }

jsonfile.writeFileSync(file, obj, { flag: 'a' })
</pre><p>License</p><hr><p>(MIT License)</p><p>Copyright 2012-2016, JP Richardson  <a href="mailto:jprichardson@gmail.com">jprichardson@gmail.com</a></p></article>

    <footer>
      &larr; <a href="index.html">twos.dev</a> /
      
        <a href="https://github.com/glacials/twos.dev/blob/main/src/js/node_modules/jsonfile/undefined">Source</a>
      
    </footer>
  </div></body>
</html>
