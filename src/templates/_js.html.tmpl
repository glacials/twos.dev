<script
  crossorigin="anonymous"
  defer
  integrity="sha384-X/XCfMm41VSsqRNQgDerQczD69XqmjOOOwYQvr/uuC+j4OPoNhVgjdGFwhvN02Ja"
  src="https://cdn.jsdelivr.net/npm/katex@0.16.0/dist/katex.min.js"
></script>
<script
  crossorigin="anonymous"
  defer
  integrity="sha384-+XBljXPPiv+OzfbB3cVmLHf4hdUFHlWNZN5spNQ7rmHTXpd7WvJum6fIACpNNfIR"
  onload="renderMathInElement(document.body);"
  src="https://cdn.jsdelivr.net/npm/katex@0.16.0/dist/contrib/auto-render.min.js"
></script>
<script>
  // TODO: Move to static generation
  if (document.location.hostname == "localhost") {
    const wsurl = "ws://localhost:8100/ws";
    const socket = new WebSocket(wsurl);
    socket.addEventListener("message", (event) => location.reload());
    socket.addEventListener("close", (event) => {
      console.log("backup initiating");
      setInterval(() => {
        const sock = new WebSocket("ws://localhost:8100/ws");
        sock.addEventListener("open", (event) => {
          location.reload();
        });
      }, 1000);
    });
  }

  // For Go developers, it's common to access the documentation for a package
  // by navigating to the package's import path in the browser.
  //
  // GitHub Pages allows omitting ".html" from the path when rendering pages,
  // so we'll selectively redirect to the package documentation if and only if
  // ".html" is not present.
  //
  // Therefore, twos.dev/winter.html is the command documentation,
  // and twos.dev/winter is the package documentation.
  if (document.location.pathname === "/winter") {
    window.location.replace("https://pkg.go.dev/twos.dev/winter");
  }

  // Change lightbox photo using arrow keys.
  document.addEventListener("keydown", (event) => {
    switch (event.keyCode) {
      case 37: // left arrow
        const moveLeftFrom = document.querySelector(
          ".gallery-item input:checked",
        );
        const moveLeftTo = document.querySelector(
          ".gallery-item:has(+ .gallery-item input:checked) input[type=checkbox]",
        );
        if (moveLeftFrom) {
          moveLeftFrom.checked = false;
        }
        if (moveLeftTo) {
          moveLeftTo.checked = true;
        }
        break;
      case 39: // right arrow
        const moveRightFrom = document.querySelector(
          ".gallery-item input:checked",
        );
        const moveRightTo = document.querySelector(
          ".gallery-item:has(input:checked) + .gallery-item input[type=checkbox]",
        );
        if (moveRightFrom) {
          moveRightFrom.checked = false;
        }
        if (moveRightTo) {
          moveRightTo.checked = true;
        }
        break;
      case 27: // escape
        const current = document.querySelector(".gallery-item input:checked");
        if (current) {
          current.checked = false;
        }
        break;
    }
  });

  document.querySelectorAll("img[src*=macos]").forEach((element) => {
    console.log("Set up macOS image trigger");
    const containerWidth = window
      .getComputedStyle(document.documentElement)
      .getPropertyValue("--container-width");
    const widthAdjustment = 223 * (element.width / element.naturalWidth);
    const finalWidth = `calc(${containerWidth} + ${widthAdjustment}px)`;

    console.log(
      `containerWidth=${containerWidth}; naturalWidth=${
        element.naturalWidth
      }; width=${element.width}; ratio=${
        element.width / element.naturalWidth
      } widthAdjustment=${widthAdjustment}; finalWidth=${finalWidth}`,
    );
    element.parentElement.style.maxWidth = finalWidth;
    element.style.maxWidth = finalWidth;
  });
</script>
